Terminals unused in grammar

   DEF
   ";"
   ERROR


State 37 conflicts: 2 shift/reduce
State 62 conflicts: 14 shift/reduce
State 63 conflicts: 14 shift/reduce
State 101 conflicts: 14 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 128 conflicts: 14 shift/reduce
State 134 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts_list

    2 stmts_list: %empty
    3           | stmts_list decl "SEP"
    4           | stmts_list error "SEP"

    5 decl: alias_decl
    6     | var_decl
    7     | const_decl
    8     | func_decl
    9     | assignment
   10     | classdef
   11     | while_stmt
   12     | expression

   13 type: "TYPE_ID"
   14     | type "->" type
   15     | "(" type ")"

   16 alias_decl: ALIAS "TYPE_ID" "=" type

   17 var_decl: VAR "ID" ":" type
   18         | VAR "ID" ":" type "=" expression

   19 const_decl: LET "ID" ":" type "=" expression

   20 assignment: SET ID_list "=" expression
   21           | SET "$" ID_list "=" expression
   22           | "$" "ID" "<-" expression

   23 ID_list: %empty
   24        | ID_list "ID"

   25 classdef: opt_mut CLASS "TYPE_ID" opt_constructor_args "=" class_bodies

   26 opt_mut: %empty
   27        | MUT

   28 opt_constructor_args: %empty
   29                     | constructor_args

   30 class_bodies: classdef_body
   31             | class_ctor

   32 classdef_body: "{" classdef_body_decl_list "}"

   33 classdef_body_decl_list: %empty
   34                        | classdef_body_decl_list classdef_body_decl "SEP"

   35 classdef_body_decl: const_decl
   36                   | var_decl
   37                   | func_decl

   38 constructor_args: "(" opt_constr_arg_dec ")"

   39 opt_constr_arg_dec: %empty
   40                   | constr_arg_dec_list

   41 constr_arg_dec_list: constr_arg_dec
   42                    | constr_arg_dec_list "," constr_arg_dec

   43 constr_arg_dec: opt_var_or_val "ID" ":" type

   44 opt_var_or_val: %empty
   45               | VAR
   46               | VAL

   47 class_ctor: "TYPE_ID" "(" opt_expression_comma_list ")"

   48 func_decl: LET "ID" func_arg_list opt_colon_type "=" body

   49 body: expression
   50     | block_expression

   51 opt_colon_type: %empty
   52               | ":" type

   53 func_arg_list: func_arg
   54              | func_arg_list func_arg

   55 func_arg: "ID" ":" type

   56 while_stmt: WHILE cond_expr body_expr_while

   57 cond_expr: expression

   58 body_expr_while: do_expression

   59 do_expression: DO expression
   60              | DO block_expression
   61              | DO assignment

   62 opt_expression_comma_list: %empty
   63                          | expression_comma_list

   64 expression_comma_list: expression
   65                      | expression_comma_list "," expression

   66 expression_comma_list_empty: %empty
   67                            | expression_comma_list

   68 expression: expression expression_list
   69           | operator_expr
   70           | conditional_expr

   71 conditional_expr: IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | WHEN expression DO expression
   73                 | WHEN expression DO block_expression
   74                 | LET let_expr_comma_list IN body

   75 body_expr_then: body

   76 body_expr_else: body

   77 operator_expr: operator_expr "&&" expr1
   78              | operator_expr "||" expr1
   79              | expr1

   80 expr1: expr1 "<" expr2
   81      | expr1 "<=" expr2
   82      | expr1 "==" expr2
   83      | expr1 "/=" expr2
   84      | expr1 ">=" expr2
   85      | expr1 ">" expr2
   86      | expr2

   87 expr2: expr2 "+" expr3
   88      | expr2 "-" expr3
   89      | expr3

   90 expr3: expr3 "*" factor
   91      | expr3 "/" factor
   92      | expr3 "%" factor
   93      | factor

   94 factor: NOT factor
   95       | "+" factor
   96       | "-" factor
   97       | "$" "ID"
   98       | "ID"
   99       | "INT"
  100       | "CHAR"
  101       | "STRING"
  102       | "BOOL"
  103       | "(" expression ")"
  104       | "TYPE_ID" "(" expression_comma_list_empty ")"

  105 expression_list: expression
  106                | expression_list expression

  107 let_expr_comma_list: let_expr
  108                    | let_expr_comma_list "," let_expr

  109 let_expr: "ID" ":" type "=" expression

  110 block_expression: "{" block_stmt_list "}"

  111 block_stmt_list: %empty
  112                | block_stmt_list block_stmt "SEP"

  113 block_stmt: var_decl
  114           | const_decl
  115           | while_stmt
  116           | assignment
  117           | expression


Terminals, with rules where they appear

$end (0) 0
error (256) 4
ALIAS (258) 16
MUT (259) 27
CLASS (260) 25
SET (261) 20 21
VAL (262) 46
VAR (263) 17 18 45
LET (264) 19 48 74
DEF (265)
IF (266) 71
THEN (267) 71
ELSE (268) 71
WHEN (269) 72 73
WHILE (270) 56
DO (271) 59 60 61 72 73
NOT (272) 94
IN (273) 74
"ID" (274) 17 18 19 22 24 43 48 55 97 98 109
"TYPE_ID" (275) 13 16 25 47 104
"INT" (276) 99
"CHAR" (277) 100
"+" (278) 87 95
"-" (279) 88 96
"*" (280) 90
"/" (281) 91
"(" (282) 15 38 47 103 104
")" (283) 15 38 47 103 104
";" (284)
"{" (285) 32 110
"}" (286) 32 110
"," (287) 42 65 108
"<-" (288) 22
"$" (289) 21 22 97
":" (290) 17 18 19 43 52 55 109
"->" (291) 14
"==" (292) 82
"%" (293) 92
"&&" (294) 77
"||" (295) 78
"=" (296) 16 18 19 20 21 25 48 109
"/=" (297) 83
"<" (298) 80
">" (299) 85
"<=" (300) 81
">=" (301) 84
"SEP" (302) 3 4 34 112
"STRING" (303) 101
ERROR (304)
"BOOL" (305) 102


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
stmts_list (53)
    on left: 2 3 4, on right: 1 3 4
decl (54)
    on left: 5 6 7 8 9 10 11 12, on right: 3
type (55)
    on left: 13 14 15, on right: 14 15 16 17 18 19 43 52 55 109
alias_decl (56)
    on left: 16, on right: 5
var_decl (57)
    on left: 17 18, on right: 6 36 113
const_decl (58)
    on left: 19, on right: 7 35 114
assignment (59)
    on left: 20 21 22, on right: 9 61 116
ID_list (60)
    on left: 23 24, on right: 20 21 24
classdef (61)
    on left: 25, on right: 10
opt_mut (62)
    on left: 26 27, on right: 25
opt_constructor_args (63)
    on left: 28 29, on right: 25
class_bodies (64)
    on left: 30 31, on right: 25
classdef_body (65)
    on left: 32, on right: 30
classdef_body_decl_list (66)
    on left: 33 34, on right: 32 34
classdef_body_decl (67)
    on left: 35 36 37, on right: 34
constructor_args (68)
    on left: 38, on right: 29
opt_constr_arg_dec (69)
    on left: 39 40, on right: 38
constr_arg_dec_list (70)
    on left: 41 42, on right: 40 42
constr_arg_dec (71)
    on left: 43, on right: 41 42
opt_var_or_val (72)
    on left: 44 45 46, on right: 43
class_ctor (73)
    on left: 47, on right: 31
func_decl (74)
    on left: 48, on right: 8 37
body (75)
    on left: 49 50, on right: 48 74 75 76
opt_colon_type (76)
    on left: 51 52, on right: 48
func_arg_list (77)
    on left: 53 54, on right: 48 54
func_arg (78)
    on left: 55, on right: 53 54
while_stmt (79)
    on left: 56, on right: 11 115
cond_expr (80)
    on left: 57, on right: 56 71
body_expr_while (81)
    on left: 58, on right: 56
do_expression (82)
    on left: 59 60 61, on right: 58
opt_expression_comma_list (83)
    on left: 62 63, on right: 47
expression_comma_list (84)
    on left: 64 65, on right: 63 65 67
expression_comma_list_empty (85)
    on left: 66 67, on right: 104
expression (86)
    on left: 68 69 70, on right: 12 18 19 20 21 22 49 57 59 64 65 68
    72 73 103 105 106 109 117
conditional_expr (87)
    on left: 71 72 73 74, on right: 70
body_expr_then (88)
    on left: 75, on right: 71
body_expr_else (89)
    on left: 76, on right: 71
operator_expr (90)
    on left: 77 78 79, on right: 69 77 78
expr1 (91)
    on left: 80 81 82 83 84 85 86, on right: 77 78 79 80 81 82 83 84
    85
expr2 (92)
    on left: 87 88 89, on right: 80 81 82 83 84 85 86 87 88
expr3 (93)
    on left: 90 91 92 93, on right: 87 88 89 90 91 92
factor (94)
    on left: 94 95 96 97 98 99 100 101 102 103 104, on right: 90 91
    92 93 94 95 96
expression_list (95)
    on left: 105 106, on right: 68 106
let_expr_comma_list (96)
    on left: 107 108, on right: 74 108
let_expr (97)
    on left: 109, on right: 107 108
block_expression (98)
    on left: 110, on right: 50 60 73
block_stmt_list (99)
    on left: 111 112, on right: 110 112
block_stmt (100)
    on left: 113 114 115 116 117, on right: 112


State 0

    0 $accept: . program $end
    1 program: . stmts_list
    2 stmts_list: . %empty
    3           | . stmts_list decl "SEP"
    4           | . stmts_list error "SEP"

    $default  reduce using rule 2 (stmts_list)

    program     go to state 1
    stmts_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts_list .  [$end]
    3 stmts_list: stmts_list . decl "SEP"
    4           | stmts_list . error "SEP"
    5 decl: . alias_decl
    6     | . var_decl
    7     | . const_decl
    8     | . func_decl
    9     | . assignment
   10     | . classdef
   11     | . while_stmt
   12     | . expression
   16 alias_decl: . ALIAS "TYPE_ID" "=" type
   17 var_decl: . VAR "ID" ":" type
   18         | . VAR "ID" ":" type "=" expression
   19 const_decl: . LET "ID" ":" type "=" expression
   20 assignment: . SET ID_list "=" expression
   21           | . SET "$" ID_list "=" expression
   22           | . "$" "ID" "<-" expression
   25 classdef: . opt_mut CLASS "TYPE_ID" opt_constructor_args "=" class_bodies
   26 opt_mut: . %empty  [CLASS]
   27        | . MUT
   48 func_decl: . LET "ID" func_arg_list opt_colon_type "=" body
   56 while_stmt: . WHILE cond_expr body_expr_while
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    error      shift, and go to state 4
    ALIAS      shift, and go to state 5
    MUT        shift, and go to state 6
    SET        shift, and go to state 7
    VAR        shift, and go to state 8
    LET        shift, and go to state 9
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    WHILE      shift, and go to state 12
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 21
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $end   reduce using rule 1 (program)
    CLASS  reduce using rule 26 (opt_mut)

    decl              go to state 24
    alias_decl        go to state 25
    var_decl          go to state 26
    const_decl        go to state 27
    assignment        go to state 28
    classdef          go to state 29
    opt_mut           go to state 30
    func_decl         go to state 31
    while_stmt        go to state 32
    expression        go to state 33
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 3

    0 $accept: program $end .

    $default  accept


State 4

    4 stmts_list: stmts_list error . "SEP"

    "SEP"  shift, and go to state 40


State 5

   16 alias_decl: ALIAS . "TYPE_ID" "=" type

    "TYPE_ID"  shift, and go to state 41


State 6

   27 opt_mut: MUT .

    $default  reduce using rule 27 (opt_mut)


State 7

   20 assignment: SET . ID_list "=" expression
   21           | SET . "$" ID_list "=" expression
   23 ID_list: . %empty  ["ID", "="]
   24        | . ID_list "ID"

    "$"  shift, and go to state 42

    $default  reduce using rule 23 (ID_list)

    ID_list  go to state 43


State 8

   17 var_decl: VAR . "ID" ":" type
   18         | VAR . "ID" ":" type "=" expression

    "ID"  shift, and go to state 44


State 9

   19 const_decl: LET . "ID" ":" type "=" expression
   48 func_decl: LET . "ID" func_arg_list opt_colon_type "=" body
   74 conditional_expr: LET . let_expr_comma_list IN body
  107 let_expr_comma_list: . let_expr
  108                    | . let_expr_comma_list "," let_expr
  109 let_expr: . "ID" ":" type "=" expression

    "ID"  shift, and go to state 45

    let_expr_comma_list  go to state 46
    let_expr             go to state 47


State 10

   57 cond_expr: . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   71                 | IF . cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    cond_expr         go to state 50
    expression        go to state 51
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 11

   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   72                 | WHEN . expression DO expression
   73                 | . WHEN expression DO block_expression
   73                 | WHEN . expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 52
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 12

   56 while_stmt: WHILE . cond_expr body_expr_while
   57 cond_expr: . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    cond_expr         go to state 53
    expression        go to state 51
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 13

   94 factor: . NOT factor
   94       | NOT . factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 54


State 14

   98 factor: "ID" .

    $default  reduce using rule 98 (factor)


State 15

  104 factor: "TYPE_ID" . "(" expression_comma_list_empty ")"

    "("  shift, and go to state 55


State 16

   99 factor: "INT" .

    $default  reduce using rule 99 (factor)


State 17

  100 factor: "CHAR" .

    $default  reduce using rule 100 (factor)


State 18

   94 factor: . NOT factor
   95       | . "+" factor
   95       | "+" . factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 56


State 19

   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   96       | "-" . factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 57


State 20

   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  103       | "(" . expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 58
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 21

   22 assignment: "$" . "ID" "<-" expression
   97 factor: "$" . "ID"

    "ID"  shift, and go to state 59


State 22

  101 factor: "STRING" .

    $default  reduce using rule 101 (factor)


State 23

  102 factor: "BOOL" .

    $default  reduce using rule 102 (factor)


State 24

    3 stmts_list: stmts_list decl . "SEP"

    "SEP"  shift, and go to state 60


State 25

    5 decl: alias_decl .

    $default  reduce using rule 5 (decl)


State 26

    6 decl: var_decl .

    $default  reduce using rule 6 (decl)


State 27

    7 decl: const_decl .

    $default  reduce using rule 7 (decl)


State 28

    9 decl: assignment .

    $default  reduce using rule 9 (decl)


State 29

   10 decl: classdef .

    $default  reduce using rule 10 (decl)


State 30

   25 classdef: opt_mut . CLASS "TYPE_ID" opt_constructor_args "=" class_bodies

    CLASS  shift, and go to state 61


State 31

    8 decl: func_decl .

    $default  reduce using rule 8 (decl)


State 32

   11 decl: while_stmt .

    $default  reduce using rule 11 (decl)


State 33

   12 decl: expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 12 (decl)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 34

   70 expression: conditional_expr .

    $default  reduce using rule 70 (expression)


State 35

   69 expression: operator_expr .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]
   77 operator_expr: operator_expr . "&&" expr1
   78              | operator_expr . "||" expr1

    "&&"  shift, and go to state 64
    "||"  shift, and go to state 65

    $default  reduce using rule 69 (expression)


State 36

   79 operator_expr: expr1 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "&&", "||", "SEP", "STRING", "BOOL"]
   80 expr1: expr1 . "<" expr2
   81      | expr1 . "<=" expr2
   82      | expr1 . "==" expr2
   83      | expr1 . "/=" expr2
   84      | expr1 . ">=" expr2
   85      | expr1 . ">" expr2

    "=="  shift, and go to state 66
    "/="  shift, and go to state 67
    "<"   shift, and go to state 68
    ">"   shift, and go to state 69
    "<="  shift, and go to state 70
    ">="  shift, and go to state 71

    $default  reduce using rule 79 (operator_expr)


State 37

   86 expr1: expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 86 (expr1)]
    "-"       [reduce using rule 86 (expr1)]
    $default  reduce using rule 86 (expr1)


State 38

   89 expr2: expr3 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   90 expr3: expr3 . "*" factor
   91      | expr3 . "/" factor
   92      | expr3 . "%" factor

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "%"  shift, and go to state 76

    $default  reduce using rule 89 (expr2)


State 39

   93 expr3: factor .

    $default  reduce using rule 93 (expr3)


State 40

    4 stmts_list: stmts_list error "SEP" .

    $default  reduce using rule 4 (stmts_list)


State 41

   16 alias_decl: ALIAS "TYPE_ID" . "=" type

    "="  shift, and go to state 77


State 42

   21 assignment: SET "$" . ID_list "=" expression
   23 ID_list: . %empty
   24        | . ID_list "ID"

    $default  reduce using rule 23 (ID_list)

    ID_list  go to state 78


State 43

   20 assignment: SET ID_list . "=" expression
   24 ID_list: ID_list . "ID"

    "ID"  shift, and go to state 79
    "="   shift, and go to state 80


State 44

   17 var_decl: VAR "ID" . ":" type
   18         | VAR "ID" . ":" type "=" expression

    ":"  shift, and go to state 81


State 45

   19 const_decl: LET "ID" . ":" type "=" expression
   48 func_decl: LET "ID" . func_arg_list opt_colon_type "=" body
   53 func_arg_list: . func_arg
   54              | . func_arg_list func_arg
   55 func_arg: . "ID" ":" type
  109 let_expr: "ID" . ":" type "=" expression

    "ID"  shift, and go to state 82
    ":"   shift, and go to state 83

    func_arg_list  go to state 84
    func_arg       go to state 85


State 46

   74 conditional_expr: LET let_expr_comma_list . IN body
  108 let_expr_comma_list: let_expr_comma_list . "," let_expr

    IN   shift, and go to state 86
    ","  shift, and go to state 87


State 47

  107 let_expr_comma_list: let_expr .

    $default  reduce using rule 107 (let_expr_comma_list)


State 48

   74 conditional_expr: LET . let_expr_comma_list IN body
  107 let_expr_comma_list: . let_expr
  108                    | . let_expr_comma_list "," let_expr
  109 let_expr: . "ID" ":" type "=" expression

    "ID"  shift, and go to state 88

    let_expr_comma_list  go to state 46
    let_expr             go to state 47


State 49

   97 factor: "$" . "ID"

    "ID"  shift, and go to state 89


State 50

   71 conditional_expr: IF cond_expr . THEN body_expr_then ELSE body_expr_else

    THEN  shift, and go to state 90


State 51

   57 cond_expr: expression .  [THEN, DO]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 57 (cond_expr)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 52

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   72                 | WHEN expression . DO expression
   73                 | . WHEN expression DO block_expression
   73                 | WHEN expression . DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    DO         shift, and go to state 91
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 53

   56 while_stmt: WHILE cond_expr . body_expr_while
   58 body_expr_while: . do_expression
   59 do_expression: . DO expression
   60              | . DO block_expression
   61              | . DO assignment

    DO  shift, and go to state 92

    body_expr_while  go to state 93
    do_expression    go to state 94


State 54

   94 factor: NOT factor .

    $default  reduce using rule 94 (factor)


State 55

   64 expression_comma_list: . expression
   65                      | . expression_comma_list "," expression
   66 expression_comma_list_empty: . %empty  [")"]
   67                            | . expression_comma_list
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  104       | "TYPE_ID" "(" . expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 66 (expression_comma_list_empty)

    expression_comma_list        go to state 95
    expression_comma_list_empty  go to state 96
    expression                   go to state 97
    conditional_expr             go to state 34
    operator_expr                go to state 35
    expr1                        go to state 36
    expr2                        go to state 37
    expr3                        go to state 38
    factor                       go to state 39


State 56

   95 factor: "+" factor .

    $default  reduce using rule 95 (factor)


State 57

   96 factor: "-" factor .

    $default  reduce using rule 96 (factor)


State 58

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  103       | "(" expression . ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    ")"        shift, and go to state 98
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 59

   22 assignment: "$" "ID" . "<-" expression
   97 factor: "$" "ID" .  [LET, IF, WHEN, NOT, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "*", "/", "(", "$", "==", "%", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]

    "<-"  shift, and go to state 99

    $default  reduce using rule 97 (factor)


State 60

    3 stmts_list: stmts_list decl "SEP" .

    $default  reduce using rule 3 (stmts_list)


State 61

   25 classdef: opt_mut CLASS . "TYPE_ID" opt_constructor_args "=" class_bodies

    "TYPE_ID"  shift, and go to state 100


State 62

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  105                | expression .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    LET        [reduce using rule 105 (expression_list)]
    IF         [reduce using rule 105 (expression_list)]
    WHEN       [reduce using rule 105 (expression_list)]
    NOT        [reduce using rule 105 (expression_list)]
    "ID"       [reduce using rule 105 (expression_list)]
    "TYPE_ID"  [reduce using rule 105 (expression_list)]
    "INT"      [reduce using rule 105 (expression_list)]
    "CHAR"     [reduce using rule 105 (expression_list)]
    "+"        [reduce using rule 105 (expression_list)]
    "-"        [reduce using rule 105 (expression_list)]
    "("        [reduce using rule 105 (expression_list)]
    "$"        [reduce using rule 105 (expression_list)]
    "STRING"   [reduce using rule 105 (expression_list)]
    "BOOL"     [reduce using rule 105 (expression_list)]
    $default   reduce using rule 105 (expression_list)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 63

   68 expression: . expression expression_list
   68           | expression expression_list .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  106 expression_list: expression_list . expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    LET        [reduce using rule 68 (expression)]
    IF         [reduce using rule 68 (expression)]
    WHEN       [reduce using rule 68 (expression)]
    NOT        [reduce using rule 68 (expression)]
    "ID"       [reduce using rule 68 (expression)]
    "TYPE_ID"  [reduce using rule 68 (expression)]
    "INT"      [reduce using rule 68 (expression)]
    "CHAR"     [reduce using rule 68 (expression)]
    "+"        [reduce using rule 68 (expression)]
    "-"        [reduce using rule 68 (expression)]
    "("        [reduce using rule 68 (expression)]
    "$"        [reduce using rule 68 (expression)]
    "STRING"   [reduce using rule 68 (expression)]
    "BOOL"     [reduce using rule 68 (expression)]
    $default   reduce using rule 68 (expression)

    expression        go to state 101
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 64

   77 operator_expr: operator_expr "&&" . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr1   go to state 102
    expr2   go to state 37
    expr3   go to state 38
    factor  go to state 39


State 65

   78 operator_expr: operator_expr "||" . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr1   go to state 103
    expr2   go to state 37
    expr3   go to state 38
    factor  go to state 39


State 66

   82 expr1: expr1 "==" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 104
    expr3   go to state 38
    factor  go to state 39


State 67

   83 expr1: expr1 "/=" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 105
    expr3   go to state 38
    factor  go to state 39


State 68

   80 expr1: expr1 "<" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 106
    expr3   go to state 38
    factor  go to state 39


State 69

   85 expr1: expr1 ">" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 107
    expr3   go to state 38
    factor  go to state 39


State 70

   81 expr1: expr1 "<=" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 108
    expr3   go to state 38
    factor  go to state 39


State 71

   84 expr1: expr1 ">=" . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr2   go to state 109
    expr3   go to state 38
    factor  go to state 39


State 72

   87 expr2: expr2 "+" . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr3   go to state 110
    factor  go to state 39


State 73

   88 expr2: expr2 "-" . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expr3   go to state 111
    factor  go to state 39


State 74

   90 expr3: expr3 "*" . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 112


State 75

   91 expr3: expr3 "/" . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 113


State 76

   92 expr3: expr3 "%" . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    factor  go to state 114


State 77

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   16 alias_decl: ALIAS "TYPE_ID" "=" . type

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 117


State 78

   21 assignment: SET "$" ID_list . "=" expression
   24 ID_list: ID_list . "ID"

    "ID"  shift, and go to state 79
    "="   shift, and go to state 118


State 79

   24 ID_list: ID_list "ID" .

    $default  reduce using rule 24 (ID_list)


State 80

   20 assignment: SET ID_list "=" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 119
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 81

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   17 var_decl: VAR "ID" ":" . type
   18         | VAR "ID" ":" . type "=" expression

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 120


State 82

   55 func_arg: "ID" . ":" type

    ":"  shift, and go to state 121


State 83

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   19 const_decl: LET "ID" ":" . type "=" expression
  109 let_expr: "ID" ":" . type "=" expression

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 122


State 84

   48 func_decl: LET "ID" func_arg_list . opt_colon_type "=" body
   51 opt_colon_type: . %empty  ["="]
   52               | . ":" type
   54 func_arg_list: func_arg_list . func_arg
   55 func_arg: . "ID" ":" type

    "ID"  shift, and go to state 82
    ":"   shift, and go to state 123

    $default  reduce using rule 51 (opt_colon_type)

    opt_colon_type  go to state 124
    func_arg        go to state 125


State 85

   53 func_arg_list: func_arg .

    $default  reduce using rule 53 (func_arg_list)


State 86

   49 body: . expression
   50     | . block_expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   74                 | LET let_expr_comma_list IN . body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    body              go to state 127
    expression        go to state 128
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 129


State 87

  108 let_expr_comma_list: let_expr_comma_list "," . let_expr
  109 let_expr: . "ID" ":" type "=" expression

    "ID"  shift, and go to state 88

    let_expr  go to state 130


State 88

  109 let_expr: "ID" . ":" type "=" expression

    ":"  shift, and go to state 131


State 89

   97 factor: "$" "ID" .

    $default  reduce using rule 97 (factor)


State 90

   49 body: . expression
   50     | . block_expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   71                 | IF cond_expr THEN . body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   75 body_expr_then: . body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    body              go to state 132
    expression        go to state 128
    conditional_expr  go to state 34
    body_expr_then    go to state 133
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 129


State 91

   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   72                 | WHEN expression DO . expression
   73                 | . WHEN expression DO block_expression
   73                 | WHEN expression DO . block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 134
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 135


State 92

   20 assignment: . SET ID_list "=" expression
   21           | . SET "$" ID_list "=" expression
   22           | . "$" "ID" "<-" expression
   59 do_expression: DO . expression
   60              | DO . block_expression
   61              | DO . assignment
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    SET        shift, and go to state 7
    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 21
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    assignment        go to state 136
    expression        go to state 137
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 138


State 93

   56 while_stmt: WHILE cond_expr body_expr_while .

    $default  reduce using rule 56 (while_stmt)


State 94

   58 body_expr_while: do_expression .

    $default  reduce using rule 58 (body_expr_while)


State 95

   65 expression_comma_list: expression_comma_list . "," expression
   67 expression_comma_list_empty: expression_comma_list .  [")"]

    ","  shift, and go to state 139

    $default  reduce using rule 67 (expression_comma_list_empty)


State 96

  104 factor: "TYPE_ID" "(" expression_comma_list_empty . ")"

    ")"  shift, and go to state 140


State 97

   64 expression_comma_list: expression .  [")", ","]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 64 (expression_comma_list)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 98

  103 factor: "(" expression ")" .

    $default  reduce using rule 103 (factor)


State 99

   22 assignment: "$" "ID" "<-" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 141
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 100

   25 classdef: opt_mut CLASS "TYPE_ID" . opt_constructor_args "=" class_bodies
   28 opt_constructor_args: . %empty  ["="]
   29                     | . constructor_args
   38 constructor_args: . "(" opt_constr_arg_dec ")"

    "("  shift, and go to state 142

    $default  reduce using rule 28 (opt_constructor_args)

    opt_constructor_args  go to state 143
    constructor_args      go to state 144


State 101

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression
  106                | expression_list expression .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    LET        [reduce using rule 106 (expression_list)]
    IF         [reduce using rule 106 (expression_list)]
    WHEN       [reduce using rule 106 (expression_list)]
    NOT        [reduce using rule 106 (expression_list)]
    "ID"       [reduce using rule 106 (expression_list)]
    "TYPE_ID"  [reduce using rule 106 (expression_list)]
    "INT"      [reduce using rule 106 (expression_list)]
    "CHAR"     [reduce using rule 106 (expression_list)]
    "+"        [reduce using rule 106 (expression_list)]
    "-"        [reduce using rule 106 (expression_list)]
    "("        [reduce using rule 106 (expression_list)]
    "$"        [reduce using rule 106 (expression_list)]
    "STRING"   [reduce using rule 106 (expression_list)]
    "BOOL"     [reduce using rule 106 (expression_list)]
    $default   reduce using rule 106 (expression_list)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 102

   77 operator_expr: operator_expr "&&" expr1 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "&&", "||", "SEP", "STRING", "BOOL"]
   80 expr1: expr1 . "<" expr2
   81      | expr1 . "<=" expr2
   82      | expr1 . "==" expr2
   83      | expr1 . "/=" expr2
   84      | expr1 . ">=" expr2
   85      | expr1 . ">" expr2

    "=="  shift, and go to state 66
    "/="  shift, and go to state 67
    "<"   shift, and go to state 68
    ">"   shift, and go to state 69
    "<="  shift, and go to state 70
    ">="  shift, and go to state 71

    $default  reduce using rule 77 (operator_expr)


State 103

   78 operator_expr: operator_expr "||" expr1 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "&&", "||", "SEP", "STRING", "BOOL"]
   80 expr1: expr1 . "<" expr2
   81      | expr1 . "<=" expr2
   82      | expr1 . "==" expr2
   83      | expr1 . "/=" expr2
   84      | expr1 . ">=" expr2
   85      | expr1 . ">" expr2

    "=="  shift, and go to state 66
    "/="  shift, and go to state 67
    "<"   shift, and go to state 68
    ">"   shift, and go to state 69
    "<="  shift, and go to state 70
    ">="  shift, and go to state 71

    $default  reduce using rule 78 (operator_expr)


State 104

   82 expr1: expr1 "==" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 82 (expr1)]
    "-"       [reduce using rule 82 (expr1)]
    $default  reduce using rule 82 (expr1)


State 105

   83 expr1: expr1 "/=" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 83 (expr1)]
    "-"       [reduce using rule 83 (expr1)]
    $default  reduce using rule 83 (expr1)


State 106

   80 expr1: expr1 "<" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 80 (expr1)]
    "-"       [reduce using rule 80 (expr1)]
    $default  reduce using rule 80 (expr1)


State 107

   85 expr1: expr1 ">" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 85 (expr1)]
    "-"       [reduce using rule 85 (expr1)]
    $default  reduce using rule 85 (expr1)


State 108

   81 expr1: expr1 "<=" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 81 (expr1)]
    "-"       [reduce using rule 81 (expr1)]
    $default  reduce using rule 81 (expr1)


State 109

   84 expr1: expr1 ">=" expr2 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   87 expr2: expr2 . "+" expr3
   88      | expr2 . "-" expr3

    "+"  shift, and go to state 72
    "-"  shift, and go to state 73

    "+"       [reduce using rule 84 (expr1)]
    "-"       [reduce using rule 84 (expr1)]
    $default  reduce using rule 84 (expr1)


State 110

   87 expr2: expr2 "+" expr3 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   90 expr3: expr3 . "*" factor
   91      | expr3 . "/" factor
   92      | expr3 . "%" factor

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "%"  shift, and go to state 76

    $default  reduce using rule 87 (expr2)


State 111

   88 expr2: expr2 "-" expr3 .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "==", "&&", "||", "/=", "<", ">", "<=", ">=", "SEP", "STRING", "BOOL"]
   90 expr3: expr3 . "*" factor
   91      | expr3 . "/" factor
   92      | expr3 . "%" factor

    "*"  shift, and go to state 74
    "/"  shift, and go to state 75
    "%"  shift, and go to state 76

    $default  reduce using rule 88 (expr2)


State 112

   90 expr3: expr3 "*" factor .

    $default  reduce using rule 90 (expr3)


State 113

   91 expr3: expr3 "/" factor .

    $default  reduce using rule 91 (expr3)


State 114

   92 expr3: expr3 "%" factor .

    $default  reduce using rule 92 (expr3)


State 115

   13 type: "TYPE_ID" .

    $default  reduce using rule 13 (type)


State 116

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   15     | "(" . type ")"

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 145


State 117

   14 type: type . "->" type
   16 alias_decl: ALIAS "TYPE_ID" "=" type .  ["SEP"]

    "->"  shift, and go to state 146

    $default  reduce using rule 16 (alias_decl)


State 118

   21 assignment: SET "$" ID_list "=" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 147
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 119

   20 assignment: SET ID_list "=" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 20 (assignment)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 120

   14 type: type . "->" type
   17 var_decl: VAR "ID" ":" type .  ["SEP"]
   18         | VAR "ID" ":" type . "=" expression

    "->"  shift, and go to state 146
    "="   shift, and go to state 148

    $default  reduce using rule 17 (var_decl)


State 121

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   55 func_arg: "ID" ":" . type

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 149


State 122

   14 type: type . "->" type
   19 const_decl: LET "ID" ":" type . "=" expression
  109 let_expr: "ID" ":" type . "=" expression

    "->"  shift, and go to state 146
    "="   shift, and go to state 150


State 123

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   52 opt_colon_type: ":" . type

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 151


State 124

   48 func_decl: LET "ID" func_arg_list opt_colon_type . "=" body

    "="  shift, and go to state 152


State 125

   54 func_arg_list: func_arg_list func_arg .

    $default  reduce using rule 54 (func_arg_list)


State 126

  110 block_expression: "{" . block_stmt_list "}"
  111 block_stmt_list: . %empty
  112                | . block_stmt_list block_stmt "SEP"

    $default  reduce using rule 111 (block_stmt_list)

    block_stmt_list  go to state 153


State 127

   74 conditional_expr: LET let_expr_comma_list IN body .

    $default  reduce using rule 74 (conditional_expr)


State 128

   49 body: expression .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    LET        [reduce using rule 49 (body)]
    IF         [reduce using rule 49 (body)]
    WHEN       [reduce using rule 49 (body)]
    NOT        [reduce using rule 49 (body)]
    "ID"       [reduce using rule 49 (body)]
    "TYPE_ID"  [reduce using rule 49 (body)]
    "INT"      [reduce using rule 49 (body)]
    "CHAR"     [reduce using rule 49 (body)]
    "+"        [reduce using rule 49 (body)]
    "-"        [reduce using rule 49 (body)]
    "("        [reduce using rule 49 (body)]
    "$"        [reduce using rule 49 (body)]
    "STRING"   [reduce using rule 49 (body)]
    "BOOL"     [reduce using rule 49 (body)]
    $default   reduce using rule 49 (body)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 129

   50 body: block_expression .

    $default  reduce using rule 50 (body)


State 130

  108 let_expr_comma_list: let_expr_comma_list "," let_expr .

    $default  reduce using rule 108 (let_expr_comma_list)


State 131

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
  109 let_expr: "ID" ":" . type "=" expression

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 154


State 132

   75 body_expr_then: body .

    $default  reduce using rule 75 (body_expr_then)


State 133

   71 conditional_expr: IF cond_expr THEN body_expr_then . ELSE body_expr_else

    ELSE  shift, and go to state 155


State 134

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   72                 | WHEN expression DO expression .  [LET, IF, THEN, ELSE, WHEN, DO, NOT, IN, "ID", "TYPE_ID", "INT", "CHAR", "+", "-", "(", ")", ",", "$", "SEP", "STRING", "BOOL"]
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    LET        [reduce using rule 72 (conditional_expr)]
    IF         [reduce using rule 72 (conditional_expr)]
    WHEN       [reduce using rule 72 (conditional_expr)]
    NOT        [reduce using rule 72 (conditional_expr)]
    "ID"       [reduce using rule 72 (conditional_expr)]
    "TYPE_ID"  [reduce using rule 72 (conditional_expr)]
    "INT"      [reduce using rule 72 (conditional_expr)]
    "CHAR"     [reduce using rule 72 (conditional_expr)]
    "+"        [reduce using rule 72 (conditional_expr)]
    "-"        [reduce using rule 72 (conditional_expr)]
    "("        [reduce using rule 72 (conditional_expr)]
    "$"        [reduce using rule 72 (conditional_expr)]
    "STRING"   [reduce using rule 72 (conditional_expr)]
    "BOOL"     [reduce using rule 72 (conditional_expr)]
    $default   reduce using rule 72 (conditional_expr)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 135

   73 conditional_expr: WHEN expression DO block_expression .

    $default  reduce using rule 73 (conditional_expr)


State 136

   61 do_expression: DO assignment .

    $default  reduce using rule 61 (do_expression)


State 137

   59 do_expression: DO expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 59 (do_expression)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 138

   60 do_expression: DO block_expression .

    $default  reduce using rule 60 (do_expression)


State 139

   65 expression_comma_list: expression_comma_list "," . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 156
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 140

  104 factor: "TYPE_ID" "(" expression_comma_list_empty ")" .

    $default  reduce using rule 104 (factor)


State 141

   22 assignment: "$" "ID" "<-" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 22 (assignment)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 142

   38 constructor_args: "(" . opt_constr_arg_dec ")"
   39 opt_constr_arg_dec: . %empty  [")"]
   40                   | . constr_arg_dec_list
   41 constr_arg_dec_list: . constr_arg_dec
   42                    | . constr_arg_dec_list "," constr_arg_dec
   43 constr_arg_dec: . opt_var_or_val "ID" ":" type
   44 opt_var_or_val: . %empty  ["ID"]
   45               | . VAR
   46               | . VAL

    VAL  shift, and go to state 157
    VAR  shift, and go to state 158

    "ID"      reduce using rule 44 (opt_var_or_val)
    $default  reduce using rule 39 (opt_constr_arg_dec)

    opt_constr_arg_dec   go to state 159
    constr_arg_dec_list  go to state 160
    constr_arg_dec       go to state 161
    opt_var_or_val       go to state 162


State 143

   25 classdef: opt_mut CLASS "TYPE_ID" opt_constructor_args . "=" class_bodies

    "="  shift, and go to state 163


State 144

   29 opt_constructor_args: constructor_args .

    $default  reduce using rule 29 (opt_constructor_args)


State 145

   14 type: type . "->" type
   15     | "(" type . ")"

    ")"   shift, and go to state 164
    "->"  shift, and go to state 146


State 146

   13 type: . "TYPE_ID"
   14     | . type "->" type
   14     | type "->" . type
   15     | . "(" type ")"

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 165


State 147

   21 assignment: SET "$" ID_list "=" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 21 (assignment)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 148

   18 var_decl: VAR "ID" ":" type "=" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 166
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 149

   14 type: type . "->" type
   55 func_arg: "ID" ":" type .  ["ID", ":", "="]

    "->"  shift, and go to state 146

    $default  reduce using rule 55 (func_arg)


State 150

   19 const_decl: LET "ID" ":" type "=" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  109 let_expr: "ID" ":" type "=" . expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 167
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 151

   14 type: type . "->" type
   52 opt_colon_type: ":" type .  ["="]

    "->"  shift, and go to state 146

    $default  reduce using rule 52 (opt_colon_type)


State 152

   48 func_decl: LET "ID" func_arg_list opt_colon_type "=" . body
   49 body: . expression
   50     | . block_expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    body              go to state 168
    expression        go to state 128
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 129


State 153

   17 var_decl: . VAR "ID" ":" type
   18         | . VAR "ID" ":" type "=" expression
   19 const_decl: . LET "ID" ":" type "=" expression
   20 assignment: . SET ID_list "=" expression
   21           | . SET "$" ID_list "=" expression
   22           | . "$" "ID" "<-" expression
   56 while_stmt: . WHILE cond_expr body_expr_while
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: "{" block_stmt_list . "}"
  112 block_stmt_list: block_stmt_list . block_stmt "SEP"
  113 block_stmt: . var_decl
  114           | . const_decl
  115           | . while_stmt
  116           | . assignment
  117           | . expression

    SET        shift, and go to state 7
    VAR        shift, and go to state 8
    LET        shift, and go to state 169
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    WHILE      shift, and go to state 12
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "}"        shift, and go to state 170
    "$"        shift, and go to state 21
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    var_decl          go to state 171
    const_decl        go to state 172
    assignment        go to state 173
    while_stmt        go to state 174
    expression        go to state 175
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_stmt        go to state 176


State 154

   14 type: type . "->" type
  109 let_expr: "ID" ":" type . "=" expression

    "->"  shift, and go to state 146
    "="   shift, and go to state 177


State 155

   49 body: . expression
   50     | . block_expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   71                 | IF cond_expr THEN body_expr_then ELSE . body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   76 body_expr_else: . body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  110 block_expression: . "{" block_stmt_list "}"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "{"        shift, and go to state 126
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    body              go to state 178
    expression        go to state 128
    conditional_expr  go to state 34
    body_expr_else    go to state 179
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    block_expression  go to state 129


State 156

   65 expression_comma_list: expression_comma_list "," expression .  [")", ","]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 65 (expression_comma_list)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 157

   46 opt_var_or_val: VAL .

    $default  reduce using rule 46 (opt_var_or_val)


State 158

   45 opt_var_or_val: VAR .

    $default  reduce using rule 45 (opt_var_or_val)


State 159

   38 constructor_args: "(" opt_constr_arg_dec . ")"

    ")"  shift, and go to state 180


State 160

   40 opt_constr_arg_dec: constr_arg_dec_list .  [")"]
   42 constr_arg_dec_list: constr_arg_dec_list . "," constr_arg_dec

    ","  shift, and go to state 181

    $default  reduce using rule 40 (opt_constr_arg_dec)


State 161

   41 constr_arg_dec_list: constr_arg_dec .

    $default  reduce using rule 41 (constr_arg_dec_list)


State 162

   43 constr_arg_dec: opt_var_or_val . "ID" ":" type

    "ID"  shift, and go to state 182


State 163

   25 classdef: opt_mut CLASS "TYPE_ID" opt_constructor_args "=" . class_bodies
   30 class_bodies: . classdef_body
   31             | . class_ctor
   32 classdef_body: . "{" classdef_body_decl_list "}"
   47 class_ctor: . "TYPE_ID" "(" opt_expression_comma_list ")"

    "TYPE_ID"  shift, and go to state 183
    "{"        shift, and go to state 184

    class_bodies   go to state 185
    classdef_body  go to state 186
    class_ctor     go to state 187


State 164

   15 type: "(" type ")" .

    $default  reduce using rule 15 (type)


State 165

   14 type: type . "->" type
   14     | type "->" type .  ["ID", ")", ",", ":", "=", "SEP"]

    "->"  shift, and go to state 146

    $default  reduce using rule 14 (type)

    Conflict between rule 14 and token "->" resolved as shift (%right "->").


State 166

   18 var_decl: VAR "ID" ":" type "=" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 18 (var_decl)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 167

   19 const_decl: LET "ID" ":" type "=" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression
  109 let_expr: "ID" ":" type "=" expression .  [IN, ","]

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    "SEP"     reduce using rule 19 (const_decl)
    $default  reduce using rule 109 (let_expr)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 168

   48 func_decl: LET "ID" func_arg_list opt_colon_type "=" body .

    $default  reduce using rule 48 (func_decl)


State 169

   19 const_decl: LET . "ID" ":" type "=" expression
   74 conditional_expr: LET . let_expr_comma_list IN body
  107 let_expr_comma_list: . let_expr
  108                    | . let_expr_comma_list "," let_expr
  109 let_expr: . "ID" ":" type "=" expression

    "ID"  shift, and go to state 188

    let_expr_comma_list  go to state 46
    let_expr             go to state 47


State 170

  110 block_expression: "{" block_stmt_list "}" .

    $default  reduce using rule 110 (block_expression)


State 171

  113 block_stmt: var_decl .

    $default  reduce using rule 113 (block_stmt)


State 172

  114 block_stmt: const_decl .

    $default  reduce using rule 114 (block_stmt)


State 173

  116 block_stmt: assignment .

    $default  reduce using rule 116 (block_stmt)


State 174

  115 block_stmt: while_stmt .

    $default  reduce using rule 115 (block_stmt)


State 175

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression
  117 block_stmt: expression .  ["SEP"]

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 117 (block_stmt)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 176

  112 block_stmt_list: block_stmt_list block_stmt . "SEP"

    "SEP"  shift, and go to state 189


State 177

   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  109 let_expr: "ID" ":" type "=" . expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 190
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 178

   76 body_expr_else: body .

    $default  reduce using rule 76 (body_expr_else)


State 179

   71 conditional_expr: IF cond_expr THEN body_expr_then ELSE body_expr_else .

    $default  reduce using rule 71 (conditional_expr)


State 180

   38 constructor_args: "(" opt_constr_arg_dec ")" .

    $default  reduce using rule 38 (constructor_args)


State 181

   42 constr_arg_dec_list: constr_arg_dec_list "," . constr_arg_dec
   43 constr_arg_dec: . opt_var_or_val "ID" ":" type
   44 opt_var_or_val: . %empty  ["ID"]
   45               | . VAR
   46               | . VAL

    VAL  shift, and go to state 157
    VAR  shift, and go to state 158

    $default  reduce using rule 44 (opt_var_or_val)

    constr_arg_dec  go to state 191
    opt_var_or_val  go to state 162


State 182

   43 constr_arg_dec: opt_var_or_val "ID" . ":" type

    ":"  shift, and go to state 192


State 183

   47 class_ctor: "TYPE_ID" . "(" opt_expression_comma_list ")"

    "("  shift, and go to state 193


State 184

   32 classdef_body: "{" . classdef_body_decl_list "}"
   33 classdef_body_decl_list: . %empty
   34                        | . classdef_body_decl_list classdef_body_decl "SEP"

    $default  reduce using rule 33 (classdef_body_decl_list)

    classdef_body_decl_list  go to state 194


State 185

   25 classdef: opt_mut CLASS "TYPE_ID" opt_constructor_args "=" class_bodies .

    $default  reduce using rule 25 (classdef)


State 186

   30 class_bodies: classdef_body .

    $default  reduce using rule 30 (class_bodies)


State 187

   31 class_bodies: class_ctor .

    $default  reduce using rule 31 (class_bodies)


State 188

   19 const_decl: LET "ID" . ":" type "=" expression
  109 let_expr: "ID" . ":" type "=" expression

    ":"  shift, and go to state 83


State 189

  112 block_stmt_list: block_stmt_list block_stmt "SEP" .

    $default  reduce using rule 112 (block_stmt_list)


State 190

   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression
  109 let_expr: "ID" ":" type "=" expression .  [IN, ","]

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 109 (let_expr)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63


State 191

   42 constr_arg_dec_list: constr_arg_dec_list "," constr_arg_dec .

    $default  reduce using rule 42 (constr_arg_dec_list)


State 192

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   43 constr_arg_dec: opt_var_or_val "ID" ":" . type

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 195


State 193

   47 class_ctor: "TYPE_ID" "(" . opt_expression_comma_list ")"
   62 opt_expression_comma_list: . %empty  [")"]
   63                          | . expression_comma_list
   64 expression_comma_list: . expression
   65                      | . expression_comma_list "," expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 62 (opt_expression_comma_list)

    opt_expression_comma_list  go to state 196
    expression_comma_list      go to state 197
    expression                 go to state 97
    conditional_expr           go to state 34
    operator_expr              go to state 35
    expr1                      go to state 36
    expr2                      go to state 37
    expr3                      go to state 38
    factor                     go to state 39


State 194

   17 var_decl: . VAR "ID" ":" type
   18         | . VAR "ID" ":" type "=" expression
   19 const_decl: . LET "ID" ":" type "=" expression
   32 classdef_body: "{" classdef_body_decl_list . "}"
   34 classdef_body_decl_list: classdef_body_decl_list . classdef_body_decl "SEP"
   35 classdef_body_decl: . const_decl
   36                   | . var_decl
   37                   | . func_decl
   48 func_decl: . LET "ID" func_arg_list opt_colon_type "=" body

    VAR  shift, and go to state 8
    LET  shift, and go to state 198
    "}"  shift, and go to state 199

    var_decl            go to state 200
    const_decl          go to state 201
    classdef_body_decl  go to state 202
    func_decl           go to state 203


State 195

   14 type: type . "->" type
   43 constr_arg_dec: opt_var_or_val "ID" ":" type .  [")", ","]

    "->"  shift, and go to state 146

    $default  reduce using rule 43 (constr_arg_dec)


State 196

   47 class_ctor: "TYPE_ID" "(" opt_expression_comma_list . ")"

    ")"  shift, and go to state 204


State 197

   63 opt_expression_comma_list: expression_comma_list .  [")"]
   65 expression_comma_list: expression_comma_list . "," expression

    ","  shift, and go to state 139

    $default  reduce using rule 63 (opt_expression_comma_list)


State 198

   19 const_decl: LET . "ID" ":" type "=" expression
   48 func_decl: LET . "ID" func_arg_list opt_colon_type "=" body

    "ID"  shift, and go to state 205


State 199

   32 classdef_body: "{" classdef_body_decl_list "}" .

    $default  reduce using rule 32 (classdef_body)


State 200

   36 classdef_body_decl: var_decl .

    $default  reduce using rule 36 (classdef_body_decl)


State 201

   35 classdef_body_decl: const_decl .

    $default  reduce using rule 35 (classdef_body_decl)


State 202

   34 classdef_body_decl_list: classdef_body_decl_list classdef_body_decl . "SEP"

    "SEP"  shift, and go to state 206


State 203

   37 classdef_body_decl: func_decl .

    $default  reduce using rule 37 (classdef_body_decl)


State 204

   47 class_ctor: "TYPE_ID" "(" opt_expression_comma_list ")" .

    $default  reduce using rule 47 (class_ctor)


State 205

   19 const_decl: LET "ID" . ":" type "=" expression
   48 func_decl: LET "ID" . func_arg_list opt_colon_type "=" body
   53 func_arg_list: . func_arg
   54              | . func_arg_list func_arg
   55 func_arg: . "ID" ":" type

    "ID"  shift, and go to state 82
    ":"   shift, and go to state 207

    func_arg_list  go to state 84
    func_arg       go to state 85


State 206

   34 classdef_body_decl_list: classdef_body_decl_list classdef_body_decl "SEP" .

    $default  reduce using rule 34 (classdef_body_decl_list)


State 207

   13 type: . "TYPE_ID"
   14     | . type "->" type
   15     | . "(" type ")"
   19 const_decl: LET "ID" ":" . type "=" expression

    "TYPE_ID"  shift, and go to state 115
    "("        shift, and go to state 116

    type  go to state 208


State 208

   14 type: type . "->" type
   19 const_decl: LET "ID" ":" type . "=" expression

    "->"  shift, and go to state 146
    "="   shift, and go to state 209


State 209

   19 const_decl: LET "ID" ":" type "=" . expression
   68 expression: . expression expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    expression        go to state 210
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39


State 210

   19 const_decl: LET "ID" ":" type "=" expression .  ["SEP"]
   68 expression: . expression expression_list
   68           | expression . expression_list
   69           | . operator_expr
   70           | . conditional_expr
   71 conditional_expr: . IF cond_expr THEN body_expr_then ELSE body_expr_else
   72                 | . WHEN expression DO expression
   73                 | . WHEN expression DO block_expression
   74                 | . LET let_expr_comma_list IN body
   77 operator_expr: . operator_expr "&&" expr1
   78              | . operator_expr "||" expr1
   79              | . expr1
   80 expr1: . expr1 "<" expr2
   81      | . expr1 "<=" expr2
   82      | . expr1 "==" expr2
   83      | . expr1 "/=" expr2
   84      | . expr1 ">=" expr2
   85      | . expr1 ">" expr2
   86      | . expr2
   87 expr2: . expr2 "+" expr3
   88      | . expr2 "-" expr3
   89      | . expr3
   90 expr3: . expr3 "*" factor
   91      | . expr3 "/" factor
   92      | . expr3 "%" factor
   93      | . factor
   94 factor: . NOT factor
   95       | . "+" factor
   96       | . "-" factor
   97       | . "$" "ID"
   98       | . "ID"
   99       | . "INT"
  100       | . "CHAR"
  101       | . "STRING"
  102       | . "BOOL"
  103       | . "(" expression ")"
  104       | . "TYPE_ID" "(" expression_comma_list_empty ")"
  105 expression_list: . expression
  106                | . expression_list expression

    LET        shift, and go to state 48
    IF         shift, and go to state 10
    WHEN       shift, and go to state 11
    NOT        shift, and go to state 13
    "ID"       shift, and go to state 14
    "TYPE_ID"  shift, and go to state 15
    "INT"      shift, and go to state 16
    "CHAR"     shift, and go to state 17
    "+"        shift, and go to state 18
    "-"        shift, and go to state 19
    "("        shift, and go to state 20
    "$"        shift, and go to state 49
    "STRING"   shift, and go to state 22
    "BOOL"     shift, and go to state 23

    $default  reduce using rule 19 (const_decl)

    expression        go to state 62
    conditional_expr  go to state 34
    operator_expr     go to state 35
    expr1             go to state 36
    expr2             go to state 37
    expr3             go to state 38
    factor            go to state 39
    expression_list   go to state 63
